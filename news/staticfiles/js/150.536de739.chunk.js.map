{"version":3,"file":"static/js/150.536de739.chunk.js","mappings":"yOAyDA,MAtDA,SAA2B,GAAyC,IAAvCA,EAAE,EAAFA,GAAIC,EAAa,EAAbA,cAAeC,EAAe,EAAfA,gBAC9C,GAAoCC,EAAAA,EAAAA,WAAS,GAAM,eAA5CC,EAAU,KAAEC,EAAa,MAGhCC,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAQC,EAAAA,EAAAA,IAAY,SAE1BH,IAAgBE,EAClB,GAAG,IAGH,IAAME,EAAkB,yCAAG,yFAGzB,GAFMF,EAAQC,EAAAA,EAAAA,IAAY,SAIf,CAAD,eAC+C,OAAvDE,MAAM,iDAAiD,0CAIlCC,MAAM,mCAAD,OAAoCX,EAAE,KAAK,CACrEY,OAAQ,QACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,SAAD,OAAWP,IAE1BQ,KAAMC,KAAKC,UAAU,CAAEhB,eAAgBA,MACtC,KAAD,EAPY,OASDiB,GACXhB,EAAgBF,GAAKC,GAErBS,MAAM,sDACP,2CACF,kBAxBuB,mCA0BxB,OACE,8BACCN,IACD,mBAAQe,QAASV,EACjBW,UAAS,yFACPnB,EAAgB,WAAa,cAC5B,SAEAA,EAAgB,YAAc,aAKrC,E,UCeA,EA/DoB,WAChB,IAAQD,GAAOqB,EAAAA,EAAAA,MAAPrB,GACR,GAAsCG,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA3CmB,EAAW,KAAEC,EAAc,KAClC,GAA8BpB,EAAAA,EAAAA,WAAS,GAAK,eAArCqB,EAAO,KAAEC,EAAU,KAC1B,GAAgCtB,EAAAA,EAAAA,WAAS,GAAM,eAAxCuB,EAAQ,KAAEC,EAAW,KAC5B,GAAkCxB,EAAAA,EAAAA,UAAS,IAAG,eAAvCyB,EAAS,KAAEC,EAAY,MAa9BvB,EAAAA,EAAAA,YAAU,YAVe,SAACN,GACxBW,MAAM,mCAAD,OAAoCX,IACtC8B,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAM,IACxBF,MAAK,SAACG,GACLV,EAAeU,GACfN,EAAYM,EAAKhC,eACjBwB,GAAW,EACb,GACJ,CAGES,CAAiBlC,GACjB6B,EAAarB,EAAAA,EAAAA,IAAY,SAC3B,GAAG,CAACR,IAMJ,OACE,yBACGwB,GACC,SAACW,EAAA,EAAO,KAER,iBAAKf,UAAU,uBAAsB,WACnC,eAAIA,UAAU,uCAAsC,SAAEE,EAAYc,cAClE,eAAGhB,UAAU,wCAAuC,UAAC,OAC9CE,EAAYe,YAAYC,WAAWC,OAAO,GAAGC,cAAgBlB,EAAYe,YAAYC,WAAWG,MAAM,GAAGC,cAAe,IAAEpB,EAAYe,YAAYM,UAAUJ,OAAO,GAAGC,cAAelB,EAAYe,YAAYM,UAAUF,MAAM,GAAGC,kBAEzO,cAAGtB,UAAU,wCAAuC,SACnD,IAAIwB,KAAKtB,EAAYuB,mBAAmBC,mBAAmB,QAAS,CAC7DC,KAAM,UACNC,MAAO,OACPC,IAAK,eAGX,cAAG7B,UAAU,0BAAyB,SAAEE,EAAY4B,eACnDtB,IACC,iCACF,SAAC,EAAiB,CAChB5B,GAAIA,EACJC,cAAeyB,EACfxB,gBA3BkB,SAACF,EAAI0B,GAC/BC,EAAYD,EACd,KA2BQ,SAAC,KAAI,CAACyB,GAAE,qBAAgBnD,GAAMoB,UAAU,iFAAgF,SAAC,qBASrI,C","sources":["Components/ArchiveButtonPost.jsx","Pages/PostContent.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Cookies from 'js-cookie';\n\nfunction ArchiveButtonPost({ id, archived_post, onArchiveChange }) {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Check if user is logged in on component mount\n  useEffect(() => {\n    //const sessionId = Cookies.get('sessionid');\n    const token = Cookies.get('token');\n    //const sessionToken = sessionStorage.getItem(\"token\");\n    setIsLoggedIn(!!token);\n  }, []);\n\n  // Handle click on archive/unarchive button\n  const handleArchiveClick = async () => {\n    const token = Cookies.get('token');\n    //const sessionId = Cookies.get('sessionid');\n    //const sessionToken = sessionStorage.getItem(\"token\");\n\n    if (!token) {\n      alert(\"You must be logged in to perform this action.\");\n      return;\n    }\n\n    const response = await fetch(`http://127.0.0.1:8000/api/posts/${id}/`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Token ${token}`,\n      },\n      body: JSON.stringify({ archived_post: !archived_post }),\n    });\n\n    if (response.ok) {\n      onArchiveChange(id, !archived_post);\n    } else {\n      alert(\"There was an error archiving/unarchiving the item.\");\n    }\n  };\n\n  return (\n    <>\n    {isLoggedIn && \n    <button onClick={handleArchiveClick}\n    className={`py-2 mb-10 px-4 font-semibold rounded-lg shadow-md text-white hover:opacity-70 ${\n      archived_post ? \"bg-[red]\" : \"bg-[green]\"\n    }`}\n    >\n      {archived_post ? \"Unarchive\" : \"Archive\"}\n    </button>\n    }\n    </>\n  );\n}\n\n\nexport default ArchiveButtonPost;\n","import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport ArchiveButtonPost from '../Components/ArchiveButtonPost'\nimport Cookies from 'js-cookie';\nimport Loading from '../Components/Loading'\n\nconst PostContent = () => {\n    const { id } = useParams();\n    const [PostContent, setPostContent] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [archived, setArchived] = useState(false);\n    const [sessionID, setSessionID] = useState('');\n\n\n    const fetchPostContent = (id) => {\n      fetch(`http://127.0.0.1:8000/api/posts/${id}`)\n        .then((res) => res.json())\n        .then((data) => {\n          setPostContent(data);\n          setArchived(data.archived_post);\n          setLoading(false);\n        });\n    };\n  \n    useEffect(() => {\n      fetchPostContent(id);\n      setSessionID(Cookies.get('token'));\n    }, [id]);\n\n    const handleArchiveChange = (id, archived) => {\n      setArchived(archived);\n    }\n    \n    return (\n      <div>\n        {loading ? (\n          <Loading />\n        ) : (\n          <div className='text-center md:mx-32'>\n            <h1 className='font-bold text-[40px] mx-4 mb-4 mt-8'>{PostContent.title_post}</h1>\n            <p className='mt-4 text-sm text-start md:mx-24 mx-8'>\n              By: {PostContent.author_post.first_name.charAt(0).toUpperCase() + PostContent.author_post.first_name.slice(1).toLowerCase() } {PostContent.author_post.last_name.charAt(0).toUpperCase()+ PostContent.author_post.last_name.slice(1).toLowerCase()}\n          </p>\n          <p className='mt-4 text-sm text-start md:mx-24 mx-8'>\n          {new Date(PostContent.time_created_post).toLocaleDateString(\"en-US\", {\n                  year: \"numeric\",\n                  month: \"long\",\n                  day: \"numeric\",\n                })}\n          </p>\n            <p className='text-[16px] md:m-24 m-8'>{PostContent.content_post}</p>\n            {sessionID && (\n              <>\n            <ArchiveButtonPost\n              id={id}\n              archived_post={archived}\n              onArchiveChange={handleArchiveChange}\n              />  \n            <Link to={`/edit-post/${id}`} className=\"py-2 mb-10 px-4 font-semibold rounded-lg shadow-md text-black hover:opacity-70\">\n              Edit Post\n            </Link>   \n              </>      \n            )}\n          </div>\n        )}\n      </div>\n    ); \n}\n\nexport default PostContent"],"names":["id","archived_post","onArchiveChange","useState","isLoggedIn","setIsLoggedIn","useEffect","token","Cookies","handleArchiveClick","alert","fetch","method","headers","Authorization","body","JSON","stringify","ok","onClick","className","useParams","PostContent","setPostContent","loading","setLoading","archived","setArchived","sessionID","setSessionID","then","res","json","data","fetchPostContent","Loading","title_post","author_post","first_name","charAt","toUpperCase","slice","toLowerCase","last_name","Date","time_created_post","toLocaleDateString","year","month","day","content_post","to"],"sourceRoot":""}